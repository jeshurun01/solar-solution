#!/usr/bin/env python3
"""Script pour remplacer tous les emojis par des ic√¥nes Material Design"""

import re
from pathlib import Path

# Mapping emoji ‚Üí Material icon
EMOJI_MAPPING = {
    # Navigation principale
    "üè†": ":material/home:",
    "‚ö°": ":material/bolt:",
    "üîã": ":material/battery_charging_full:",
    "üìÑ": ":material/description:",
    
    # Actions
    "üìã": ":material/list:",
    "üóëÔ∏è": ":material/delete:",
    "‚úèÔ∏è": ":material/edit:",
    "üíæ": ":material/save:",
    "üìÇ": ":material/folder_open:",
    "üñ®Ô∏è": ":material/print:",
    "üìä": ":material/analytics:",
    "üìà": ":material/trending_up:",
    
    # M√©triques et indicateurs
    "üí∞": ":material/attach_money:",
    "üå≥": ":material/park:",
    "üí°": ":material/lightbulb:",
    "üîå": ":material/power:",
    "‚òÄÔ∏è": ":material/wb_sunny:",
    "üåô": ":material/nights_stay:",
    "‚öôÔ∏è": ":material/settings:",
    "üìè": ":material/straighten:",
    "üîß": ":material/build:",
    "‚öñÔ∏è": ":material/balance:",
    "üéØ": ":material/target:",
    "‚úÖ": ":material/check_circle:",
    "‚ùå": ":material/cancel:",
    "‚ö†Ô∏è": ":material/warning:",
    "‚ÑπÔ∏è": ":material/info:",
    "üìù": ":material/edit_note:",
    "üîç": ":material/search:",
    "üìÖ": ":material/calendar_today:",
    "üè¢": ":material/business:",
    "üìç": ":material/location_on:",
    "üìû": ":material/phone:",
    "‚úâÔ∏è": ":material/email:",
}

def replace_emojis_in_file(file_path: Path) -> int:
    """Remplace tous les emojis dans un fichier"""
    try:
        content = file_path.read_text(encoding='utf-8')
        original_content = content
        
        # Remplacer chaque emoji
        for emoji, icon in EMOJI_MAPPING.items():
            content = content.replace(emoji, icon)
        
        # Compter les changements
        changes = sum(1 for e in EMOJI_MAPPING if e in original_content)
        
        if content != original_content:
            file_path.write_text(content, encoding='utf-8')
            print(f"‚úì {file_path.name}: {changes} emojis remplac√©s")
            return changes
        return 0
        
    except Exception as e:
        print(f"‚úó {file_path.name}: Erreur - {e}")
        return 0

def main():
    """Point d'entr√©e principal"""
    base_dir = Path(__file__).parent
    
    # Fichiers √† traiter
    files_to_process = [
        base_dir / "app.py",
        base_dir / "pages" / "1_‚ö°_Equipments.py",
        base_dir / "pages" / "2_üîã_Calculations.py", 
        base_dir / "pages" / "3_üìÑ_Report.py",
        base_dir / "main.py",
        base_dir / "main_new.py",
    ]
    
    total_changes = 0
    files_changed = 0
    
    print("üîÑ Remplacement des emojis par des ic√¥nes Material Design...\n")
    
    for file_path in files_to_process:
        if file_path.exists():
            changes = replace_emojis_in_file(file_path)
            if changes > 0:
                total_changes += changes
                files_changed += 1
        else:
            print(f"‚ö† {file_path.name}: Fichier introuvable")
    
    print(f"\n‚úÖ Termin√©: {total_changes} emojis remplac√©s dans {files_changed} fichiers")

if __name__ == "__main__":
    main()
